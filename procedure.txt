#####   Procedure of building a system with FastAPI #####


1. Create the "main.py" file. Inside that, import the fastapi module & build simple APIs using simple python-methods.

2. After building the method & decorating with the instance of FastAPI ("app"), we need to start the server, we use the following cmd.
    uvicorn main:app --reload

    Syntax:  uvicorn fileName:FastAPI_objectName --reload

NB:  Uvicorn is a lightning-fast ASGI server, which can be used to run django-projects. 
    The operation that is wrapped with a FastAPI decorator, is called "Path Operation Function".


-----------------> Break down of FastAPI

2. Initialize empty git repository in the working directory.
    Also create the ".gitignore" file.

3. For dynamic routing in the path of FastAPI decorator, we use second-bracket "{}" along with the pathName string leading a forward-slash.
    Then we can use that as a variable in the 


-----------------> [ Path Parameter ]  Pass id/ other data dynamically inside the FastAPI routing-path
    To use that in the path-operation-functions.

4. Firstly use the second bracket in the path-string. To use this path-string-variable inside the path-operation-function,
    we need to use param in the method. By default, it will use the dynamic value as string inside the methods.

5. To define the value as string/ integer/ boolean/ float, it's required to define inside the method's parameter.


-----------------> FastAPI using Swagger UI for Frontend UI

6. To view the developed APIs in the browser, use "docs" keyword after the base-url ( "http://127.0.0.1:8080/docs/" )


-----------------> Alternative of Swagger UI for Frontend UI

7. Use "redoc" after the base-url ( "http://127.0.0.1:8080/docs/" )


-----------------> [ Query Parameter ] Pass Query Parameter in the routing-string.

[ NB ]:  Query parameters are not going to change the routing path of the FastAPI path. We can accept the query parameter 
    from the routing-path-string using paramterized function.

( Pass 'limit' query paramter)
8. Use the browser to use query in the routing-path by using the "?limit=10", then it can be fetched inside the function using
    the paraterized function. ( Please view the "blogList" function )


-----------------> [ Path Parameter ] Pass Default Path Parameter, thus it'll not throw errors for the not passing required paramters.

9. Inidividually specify default values for all the parameters of a method. Thus it'll not throw an error & asked for the values of the parameters.

10. If any optional paramters is passed in the method, then we are required to define that using the keyword "Optional" following the colon. 
    Then assign that parameter with "None".


-----------------> How does FastAPI know if the parameter is a query-param or a path-param?

[ Note ]:  FastAPI is smart enough to understand that if a variable is accepted in the method-param, and it matches any dynamic variable of the path-string,
    then it'll operate as path-parameter, otherwise, it'll treat other parameters as query-parameters.
    ANd it'll throw an error, if any defult value is not defined for the params as well as not metioned in the url while hitting the API.


-----------------> API: Create a new blog 

11. For creating a new blog inside the DB, we first need to establish the connection with the database.

12. [ Establish DB Connection ]: inside the "database.py"
        Create the db-engine using the SQLAlchemy. Here we need to define the db path in the directory. Initially, we are using the SQLite DB.
        Then need to instansiate the db-table mapping using the "declarative_base" module.
        Create the DB session using the sessionmaker.
    
[ NB ]:  The model-class inside the "schemas.py" is responsible for creating the request-body in the browser/ client/ user-end.
        The model-class inside the "models.py" is responsible for mapping the db-table as well as table-fields in the DB.

13. [ "main.py" ]  For making the migrations inside the DB, we need to define the engine using the following code-block.
            models.Base.metadata.create_all( engine )
    Create the function ( "create_blog" ) to create the row inside the DB.

[ IMPORTANT ]:  Any API function interacting with the DB should have the "db" param whose type will be define as Session inported from the "sqlalchemy.orm".
[ NB ]:  When we create an API, it's very important to provide an appropriate status-code.

14. We can define the status code inside the api-path-decorator with an extra parameter.
    Follow the link below to define the appropriate http-status-codes.
        https://docs.python.org/3/library/http.html#http.HTTPStatus
    [ or follow ]:  https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
    
    [ Alternatively - better approach ]: Import the "Status" module from the "fastapi" & 
        use that in the "status_code" param. The VS Code auto-complete will help to guide.

15. To ensure appropriate status-code while handling exception, we are required to use the "Response" module imported from "fastapi".
    The response param in the method will be as "Response".
    The status_code param will be overriden.


-----------------> Blog Delete API

16. To delete any record from the DB, we use the "delete" mwthod along with the "fastapi" decorator ( "app" ).
    Firstly, need to make a query into the DB using the "filter" method. The blog 'id' will be passed from the api-path through the method-param.
    In SQLAlchemy, the delete method works with the "filter" method. ( *tried to use the 'delete()' method along with the 'get()' ).
    Finally, the db-session-instance is required to be committed to make an effect in the DB.

    [ NB ]: If the status-code "204" is provided as param along with the api-path-url, then the "delete" API won't return any response-body.

    [ Further Development - Done ]:  Establish the exception-handling of no such available record for deleting.


-----------------> Blog Update API

Ref [ Aid to build the data-update API ]:  https://www.youtube.com/watch?v=2g1ZjA6zHRo
    [ Time Frame ]:  01:08:30

17. To update a particular record from the DB, first fetch that record from the DB. Thus, the "id" will be passed using the api-url-path through the method-param.
    Then the request data ("title", "body"), will be assigned to the instance of the record.
    Finally, make the "commit()" func to actually take the effect in the db-table.

    [ Optional ]: Can return the updated data from the db-table, for that, make a "refresh()" func before that.


-----------------> Response Model ( aka response-schema )
    
18. As the name suggest, For the response rom the API to the client, 
    we are required to define response-models.
    By using a response-model, we can customize the response-body sent from the API to the client/ browser.
    Create another schema-class which will be used for displaying the response-body after hitting the API from the client.
    The schema-class will be used in the API-url-path as another param.
    [ NOTE ] Since the response will be a provided from the API, so the response-model should be inside the faspAPI decorator's param instead of the method's param.
    
    Use the response-model in the "get_individual_blog_detail" & "get_all_blogs" APIs.

    The response model param defines the response exactly similar to the response-model aka pydantic-model/ schema we have defined inside the "schemas.py" class.

    [ IMPORTANT ]:  If we want to apply response-model to such API where multiple-records exist inside the response-body, 
    then we need to wrap that with the "List[]" class imported from the "typing" module.

    [ Better Approach ]: Instead of extending the main-schema-model as the response-model, extends/ inherits the request-model.
    Means, the respone-model & the request-body-model should be separated, without extending the model created for the request-body.
    Then, the response-model will be able to work properly.


-----------------> Create User API

19. Create a schema for providing a request-body for the client/ browser.
    After that we required the DB connection in the mthod thorugh the method-param.
    Then, the actual db-model aka SQLAlchemy model is required to be created.

[ NOTE ]: THe password is not hashed in the response-body.

Make the password hashed in the response-body after the API in called.
20. Install two pip modules:  passlib[bcrypt] & bcrypt
    Import the  CrpytContext frm the "passlib.context" module.
    Make the instance of the password-hashing.
    Hash the requested-password before setting that inside the user-creation-instance.

    [ NB ]:  For hashing, we can create a class in a separate file called "hashing.py".
    Inside that file, create a method ("bcrypt_hash") inside a class called "Hash".
    This class-method will be used while creating the new user-instance & provide the "request.password" in the method param.


-----------------> Build a response model for the user

21. Build a response-nmodel for the user in order to display the name & email of the user.
    This response-model will be created in the "schemas.py" file & passed through the API param.


-----------------> Show the routes/endpoints using the tags

22. For seprating the endpoints inside the documentation, that time, we can use the tags.
    It'll seprate the endpoints according to the topics.
    i.e. to seprate the blogs & users, we use the tags "blogs" & "tags".
    Use the as the api-url-path params.


-----------------> Relationships between the models

23. When we want to make relationship between two tables, then we use the "relationship" from the "sqlalchemy.orm" inside the "models.py" file.
    
    [ NOTE ]:  We are require to define the "back_populates" param. 
    
    But while using the param "back_populates", we need to define the models according to their tableNames.

    Syntax:
        relFieldName = relationship( "modelName", back_populates='otherRelModelFieldName' )

    [ NOTE ]:  This "relFieldName" should be generated between both the models. 
    
    But to define relationship between two models, we need the foreignKey column in both models.
    Syntax:
        FK_columnName = Column( dataType, ForeignKey( 'otherModelTableName.id' ) )
    [ NB ]:  dataType is typically be the "Integer" type.

    [ NB ]:  If we don't pass the user-id while creating a new blog, then it'll throw an error.
    So we're hard-coding the user-id while creating the blog-record, we're defining the user-id=1


-----------------> Modify the response model after establishing the relationship between two SQLAlchemy models

24. To view the creator of a specific blog while called through API, then we create another field inside the "" schema (serializer)/ pydantic model.
    the fieldName should be exactly similar to the fieldName defined inside the SQLAlchemy mode inside the "models.py" file.
    Syntax:
        schemaFieldName: otherUserModelName
    [ NB ]:  schemaFieldName = SQLAlchemy_model_relField
        But the "schemaModel", which is going to be called in another schemaModel should be above that schemaModel.

25. But then if we want to get all the blogs while a specific user or all user is called, then we should use the main "blog" schema.
    [ NB ]:  If the response is consisted of multiple records, then it should be wrapped up with the "List[]" class.
        Also, the response class models will also contain the class "Config()" to enable the "orm_mode".



